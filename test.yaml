openapi: 3.0.0
info:
  title: Markdown Content
  description: Test case to show markdown support. For more info check specification (http://spec.openapis.org/oas/v3.0.3)
  version: 1.0.0
paths:
  /markdown:
    get:
      summary: Markdown in Description. 
      description: |
        # Preface
        Welcome to the Business Objects API Guide! You can use the Business Objects API to create all the calls you need to integrate with Business Objects. This guide provides information on available endpoints and how to interact with it.

        Version: `1.0`

        Last updated: `2021-01-19`

        ## Revision History

        | Date         | Version   | Description                            |
        | :----------- | :-------- | :------------------------------------- |
        | `2021-01-19` | `1.0`     | Initial Revision (Friendly-User-Phase) |

        # Introduction
        The Business Objects API can be accessed over HTTPS and is based on RESTful design principles and OData V4. We use predictable resource-oriented URLs, accept JSON request bodies and return JSON responses. The only exception to this is our metadata endpoint, which is currently still based on XML. The API uses standard HTTP response codes, authentication, and verbs.

        Above all, the self-describing interface of Business Objects will help you to interact with the service without having to know details about the underlying protocol.

        ## Prerequisites
        Before you can use the Business Objects API within your application, you first have to subscribe and configure the app in your tenant. To register a new tenant or to subscribe the app visit the d.velop cloud center at https://my.d-velop.cloud/.

        Since all requests to the API must be authenticated, users or API keys must also be configured that have the appropriate authorization.

        ## API Root endpoint
        In this documentation, we will use the term *Root endpoint* to refer to the base address of the Business Objects service.

        | Root endpoint | `https://<tenantDomain>.d-velop.cloud/businessobjects/` |
        |---------------|---------------------------------------------------------|

        Unless stated otherwise, all addresses in the rest of this documentation are relative to the root endpoint.

        ## Making requests
        ### HTTP verbs
        As per RESTful design patterns, Business Objects API uses the following HTTP verbs that most clients are familiar with:

        * `GET` - Read resources
        * `POST` - Create new resources
        * `PUT` - Replace existing resources
        * `PATCH` - Update parts of resources
        * `DELETE` - Remove resources

        `PATCH` is recommended as the preferred means of updating an entity.

        ### Request Format
        For `POST`, `PUT`, and `PATCH` requests, the request body is OData flavored JSON (the `Content-Type` header must be set to `application/json`).

        ### Response Format
        The default response format is OData flavored JSON (except where noted), encoded in the UTF-8 character encoding. 

        # Security
        Requests must be made over HTTPS. Any non-secure requests are met with a redirect to the HTTPS equivalent URI. Make sure that your application validates certificates.

        ## Authentication
        Only authenticated users are allowed to make API requests. So using the service requires a valid authentication of the Identity Provider App.

        See Identity Provider App documentation for a detailed overview about the authentication and authorization process, on how to get such authentication and how to implement it in your application.

        The `AuthSessionId` must be given to every request. This can be done in two ways:

        * using the `Authorization` header with the `Bearer` scheme and a bearer token
        * or via a cookie `AuthSessionID` that contains the session id

        Which variant should be used depends on your requirements. If Business Objects is accessed from a browser, the use of cookies is more advisable. For server-to-server communication, a bearer token is usually the preferred way.

        ### Bearer
        An authorization header containing a valid bearer token can be included in a request like follows:

        ```http
        Authorization: Bearer <bearerToken>
        ```

        You must replace <bearer_token> with your personal bearer token. It is base64 encoded and usually looks something like `cF9/EIVw...`.

        > warning: The bearer token is your key to accessing all of your resources. Always keep it secure. 

        ### Cookie
        Cookies are handled automatically in the browser. If you still have to create and transfer the cookie manually, make sure that the `AuthSessionId` has to be URL-encoded.

        ## Altering the state of the server
        In the case of HTTP methods that change the server-side state (`POST`, `PUT`, `PATCH`, and `DELETE`), the Origin header must be transferred and must match the target origin. Otherwise the request is rejected with the status code `403 Forbidden`. The Origin request header indicates where a fetch originates from and must be set as follows:

        ```http
        Origin: <baseURI> 
        ```

        Set the `baseURI` variable to a valid value for your tenant. The format for this is: `https://<tenantDomain>.d-velop.cloud` (the header does not contain any path information).

        ## Application Roles
        The following roles are used by Business Objects:

        | Role | Permissions | Description |
        |:-----|:------------|:------------|
        | Tenant Admin | All application permissions | Predefined administration role with tenant wide permissions |
        | Model Admin | Read and write (create, update, read) custom models and permission configuration | Administration of the model configuration and the permission configuration |
        | Data Writer | Write instance data (create, update, delete) | Usually, for technical users who need write access to the instance data |
        | Data Reader | Read instance data | Typically assigned to technical users who need read access to the instance data |



        ### Use HTML in markdown
        <br>
        <div style="color: white; background-color:SlateBlue; padding: 12px; border-radius:2px">
          Markdown do not support colors or fancy HTML designs. However, if you need you can put some html directly inside the markup with some inline styling.
          This box I designed using raw HTML inside the markdown
        </div>  
        <br>
        <div style="color:#bbb; background-color:#444; padding: 12px 0px 12px 12px;border-left: 5px solid #F06560;">
          <b style="color:#F06560">TIP</b>  Here is another one, done using HTML inside markdown with two different colors to make it appear like a TIP
        </div>  
        <br>


        ### Images 
        Inline Images no-gap - ![appspot image filler](http://ipsumimage.appspot.com/100)![appspot image filler](http://ipsumimage.appspot.com/100)

        Inline Images Single space gap - ![appspot image filler](http://ipsumimage.appspot.com/100)
        ![appspot image filler](http://ipsumimage.appspot.com/100)

        Next Line Image
        
        ![appspot image filler](http://ipsumimage.appspot.com/140x100.png)

      parameters:
        - name: full-name
          in: query
          description: |
           Field descriptions can contain `Markdown` (Markdown must be monospaced)<br/>
           **CONSTRAINTS** 
           ```
            - At least 3 characters
            - Cannot have space
            - Cannot have number
            - First Letter must be capital
           ```
          required: true
          schema:
            type: string
            minimum: 3
        - name: height
          in: query
          description: Height in `inches` (inches must be monospaced)
          required: true
          schema:
            type: integer
            format: int32
            minimum: 12
            maximum: 120
        - name: interests
          in: query
          required: true
          description: |
            Default is `hiking` (hiking must be monospaced)
            
            | Heading 1 | Left-Justified | Centered | Right-Justified |
            | --------- | :------------- | :------: | --------------: |
            | text | text | text | text |
            | text | text | text | text |
            | text | text | text | text |

          schema:
            type: array
            minItems: 1
            maxItems: 3
            items:
              type: string
              enum:
                - computers
                - hiking
                - swiming
              default: hiking 

      responses:
        '200':
          description: Response Schema field contains `Markdown` contents  (Markdown must be monospaced)
          content:
            application/json:
              schema:
                type: object
                description: Description of `Person` object (Person must be monospaced)
                properties:
                  fullName:
                    description: Person's Full name is made up of `firstName` and `lastName` (firstName and lastName must be mono-spaced).
                    type: object
                    properties:
                      firstName:
                        description: _First name_ (First name should be italics)
                        type: string
                      lastName:
                        description: |
                          `Last name` (last name must be monospaced)
                        type: string
                  hobbies:
                    type: array
                    description:  list of words separated by `comma` (comma should be monospaced).
                    items: 
                      type: string
                  dependentNames:
                    type: array
                    description: Array of **Dependents** (Dependents must be bold).
                    items:
                      type: object
                      description: Full Name Object is made up of `firstName` and `lastName` (firstName and lastName must be mono-spaced).
                      properties:
                        fullName:
                          description: Parts of **First Name** (First Name must be bold)
                          type: object
                          properties:
                            firstName:
                              description: Dependent First Name
                              type: string
                            lastName:
                              description: Dependent Last Name
                              type: string
          headers:                  
            Link:
              required: true
              schema:
                type: string
              description: |
                Pagination links are included in the Link header of responses.
                It is important to follow these Link header values instead of constructing your own URLs as query parameters or cursor formats may change without notice.

                | Link Relation | Description                                         |
                |:--------------|:----------------------------------------------------|
                | first         | The URL of the immediate first page of results      |
                | last          | The URL of the immediate last page of results       |
                | next          | The URL of the immediate next page of results       |
                | prev          | The URL of the immediate previous page of results   |
                | self          | The URL of the immediate current page of results    |
